googdata = googdata |> update(:(Year = map(year, Date)))
padmonth(m::Int) = month < 10 ? "0" * string(month) : string(month)
googdata = googdata |> update(:(YM = string(Year) * padmonth(Month)))
googdata = googdata |> update(:(map(*, map(string, Year), map(padmonth, Month))))
googdata = googdata |> update(:(YM = map(*, map(string, Year), map(padmonth, Month))))
padmonth(m::Int) = m < 10 ? "0" * string(month) : string(month)
googdata = googdata |> update(:(YM = map(*, map(string, Year), map(padmonth, Month))))
padmonth(m::Int) = m < 10 ? "0" * string(month) : string(m)
googdata = googdata |> update(:(YM = map(*, map(string, Year), map(padmonth, Month))))
map(padmonth, googdate[:Month])
map(padmonth, googdata[:Month])
padmonth(m::Int) = m < 10 ? "0" * string(m) : string(m)
googdata = googdata |> update(:(YM = map(*, map(string, Year), map(padmonth, Month))))
groupby(googdata, :YM)
gg = groupby(googdata, :YM)
typeof(gg)
names(gg)
methods(groupby)
map(shape, groupby(googdata, :YM))
map(size, groupby(googdata, :YM))
xx = map(size, groupby(googdata, :YM))
xx
groupby(googdata, :YM)
methods(by)
by(googdata, :YM, minimum)
by(googdata, :YM, min)
by(googdata, :YM, mean)
select(:Open, groupby(googdata, :YM))
select([:Open], groupby(googdata, :YM))
SubDataFrame <: DataFrame
gg = groupby(googdata, :YM)
gg[1]
typeof(gg[1])
gg[1][:Open]
select([:Open], groupby(googdata, :YM))
select([:Open], groupby(googdata, :YM))
select([:Open], groupby(googdata, :YM))
select(:Open, gg[1])
select([:Open], gg[1])
select(:Open, gg[1])
select([:Open], gg[1])
googdata 
googdata = googurl |> download |> open |> readtable
select(:Open, googdata)
select(:Open, googdata)
googdata |> select(:Open)
:(d -> date(d))
ex = :(map(d -> date(d), Date))
ex.head
ex.args
ex.args[2]
typeof(ex.args[2])
ex.args[2].head
 ex = :(function f(x) x*x end)
ex.head
10 in (10, 20)
10 !in (10, 20)
!(10 in (10, 20))
end
methods(groupby)
using DataFrames
methods(groupby)
using DataFrame
methods(groupby)
groupby
groupby
groupby
gg
gg[1]
gg[1] |> select(:Open)
gg |> select(:Open)
SubDataFrame
gg[1] |> select(:Open)
map(select(:Open), gg)
gg |> select(:Open)
gg |> select(:Open)
select([:Open], gg)
gg |> select(:Open)
SubDataFrame <: AbstractDataFrame
GroupedDataFrame <: AbstractDataFrame
gg[1]
update(:(Spread = High - Low), gg)
gg
@which update(:(Spread = High - Low), gg)
update(:(Spread = High - Low), gg[1])
update(:(Spread = High - Low), gg[1])
@which copy(googdata)
names(gg[1])
gg1 = gg[1]
gg1[:Test] = 100
typeof(gg1)
)
gg
vcat(gg)
typeof(gg)
reduce(vcat, gg)
combine(gg)
map(df -> mean(df[:Volume]), gg)
combine(map(df -> mean(df[:Volume]), gg))
typeof(gg)
names(gg)
gg.vals)
gg.vals
gg.names
gg.keys
gg.vals
myf = aggregate(:(Mean = mean(Volume)))
myf(googdata)
myf = aggregate(:(Mean = mean(Volume)))
myf(gg[1])
myf(gg[2])
myf(gg[10])
gg[1]
gg[2]
mean(gg[1][:Volume])
mean(gg[2][:Volume])
mean(gg[10][:Volume])
parse_df_expr(:(Mean = mean(Volume)), gg[1])
parse_df_expr(:(Mean = mean(Volume)), gg[2])
eval(parse_df_expr(:(Mean = mean(Volume)), gg[2]))
eval(parse_df_expr(:(Mean = mean(Volume)), gg[1]))
eval(parse_df_expr(:(Mean = mean(Volume)), gg[2]))
aggregate(:(Mean = mean(Volume)), gg[1])
aggregate(:(Mean = mean(Volume)), gg[2])
aggregate(:(Mean = mean(Volume)), gg[3])
aggregate(:(Mean = mean(Volume)), gg[4])
map(aggregate(:(Mean = mean(Volume))), gg)
for g in gg: aggregate(:(Mean = mean(Volume)))
:end
for g in ggaggregate(:(Mean = mean(Volume)))
end
for g in gg
g |> aggregate(:(Mean = mean(Volume)))
end
g |> aggregate(:(Mean = mean(Volume)))
for g in gg
print(g |> aggregate(:(Mean = mean(Volume))))
end
gg |> aggregate(:(Mean = mean(Volume)))
gg |> aggregate(:(Mean = mean(Volume)))
gg.values
names(gg)
for g in gg
print(g |> aggregate(:(Mean = mean(Volume))))
end
gg |> aggregate(:(Mean = mean(Volume)))
gg[1] |> aggregate(:(Mean = mean(Volume)))
gg[2] |> aggregate(:(Mean = mean(Volume)))
gg[10] |> aggregate(:(Mean = mean(Volume)))
[g |> aggregate(:(Mean = mean(Volume))) for g in gg]
reduce(vcat, [g |> aggregate(:(Mean = mean(Volume))) for g in gg])
aggregate(:(Mean = mean(Volume)), gg)
gg |> aggregate(:(Mean = mean(Volume)))
@which aggregate(:(Mean = mean(Volume)), gg)
@which aggregate(:(Mean = mean(Volume)))
@which aggregate([:(Mean = mean(Volume))])
aggregate(:(Mean = mean(Volume)), gg)
[aggregate(:(Mean = mean(Volume)), g) for g in gg]
hcat([aggregate(:(Mean = mean(Volume)), g) for g in gg])
hcat([aggregate(:(Mean = mean(Volume)), g) for g in gg]...)
vcat([aggregate(:(Mean = mean(Volume)), g) for g in gg]...)
for g in gg print(typeof(g)) end
for g in gg println(typeof(g)) end
expr = :(Mean = mean(Volume))
gg[1] |> aggregate(expr)
gg[2] |> aggregate(expr)
gg[3] |> aggregate(expr)
gg[10] |> aggregate(expr)
aggregate(expr)
myf = aggregate(expr)
myf(gg)
@which myf(gg)
myagg(df::AbstractDataFrame) = aggregate(expr)
@which myagg(gg)
@which myagg(gg[1])
myagg(gg[1])
myagg
methods(myagg)
df -> aggregate(expr)
aggregate(expr, gg[1])
aggregate(expr, gg[10])
[g |> aggregate(expr) for g in gg]
gg[1]
gg[2]
@which aggregate(expr, gg[2])
parse_df_expr(expr.args[2], gg[2])
parse_df_expr(expr.args[2], gg[2]) |> eval
parse_df_expr(expr.args[2], gg[10]) |> eval
parse_df_expr(expr.args[2], gg[10])
parse_df_expr(expr.args[2], gg[1])
getindex(gg[2], :Volume)
getindex(gg[10], :Volume)
parse_df_expr(expr, gg[1])
parse_df_expr(expr, gg[2])
Expr(:call, :getindex, gg[2], QuoteNode(:Volume))
names(gg[2])
names(gg[1])
expre
expr
expr = :(mean = mean(Volume))
parse_df_expr(expr, gg[1])
expr
copy(expr)
setindex
expr = :(mean = mean(Volume))
parse_df_expr(expr, gg[1])
parse_df_expr(expr, gg[2])
parse_df_expr(expr, gg[10])
expr
parse_df_expr(expr, gg[10])
parse_df_expr(expr, gg[10])
parse_df_expr(expr, googdata)
expr
expr.args
expr.args[2]
expr.args[2].args
isa(expr.args[2].args[2], Symbol)
expr.args[2].args[2] in names(gg[2])
expr2 = copy(expr)
expr2
expand_nodes(expr2)
expand_nodes(expr2, gg[2])
expr2
expand_nodes(expr2, gg[2])
expand_nodes(expr2, gg[2])
expand_nodes(expr2, gg[2])
expand_nodes(expr2, gg[3])
parse_df_expr(expr2, gg[3])
parse_df_expr(expr2, gg[1])
aggregate(expr, gg[1])
aggregate(expr, gg[2])
aggregate(expr, gg[10])
aggregate(expr, gg)
vcat(aggregate(expr, gg))
names(gg)
typeof(gg)
gg.cols
gg[1]
gg[2]
gg[10]
gg[15]
gg[13]
gg[14]
gg[12]
gg |> aggregate(expr)
aggregate(expr, gg[1])
[aggregate(expr, g) for g in gg]
vcat([aggregate(expr, g) for g in gg])
vcat([aggregate(expr, g) for g in gg]...)
aggregate(expr, gg)
@which gg |> aggregate(expr)
aggregate(expr)
aggregate(expr)(gg)
aggregate(expr, gg)
aggregate(expr, gg)
@which aggregate(expr, gg)
aggregate(expr, gg)
vcat(aggregate(expr, gg)...)
aggregate(expr, gg)
aggregate(expr, gg)
aggregate(expr, gg)
aggregate([expr], gg[1])
aggregate([expr], gg[2])
aggregate([expr], gg[3])
map(aggregate([expr]), gg)
[aggregate([expr])(g) for g in gg]
[g |> aggregate([expr]) for g in gg]
vcat([g |> aggregate([expr]) for g in gg]...)
aggregate([expr], gg)
gg |> aggregate(expr)
gg |> aggregate(:(mean = mean(Volume), max = maximum(Volume)))
gg |> aggregate(:(mean = mean(Volume)), :(max = maximum(Volume)))
gg
typeof(gg)
methods(names)
names(GroupedDataFrame)
gg.idx
gg.starts
gg.ends
gg.col
gg.cols
names(GroupedDataFrame)
gg.parent
getindex(gg[1], 1, gg.cols)
gg.parent[gg.starts, gg.cols]
gg |> aggregate(expr)
gg[1][gg[1][:Open] < gg[1][:Close], :]
gg[1][gg[1][:Open] .< gg[1][:Close], :]
gg[1][:Test] = 100
getindex!
typealias myInt Int32
myInt
gg |> where(:(Open .> Close))
where(:(Open .> Close), gg)
select
methods(select)
Base.select
select(x::String) = x[1]
help(DataFrame)
where(:(Open .> Close), gg)
where(:(Open .> Close), gg)
where(:(Open .> Close), gg)
@where where(:(Open .> Close), gg)
@which where(:(Open .> Close), gg)
where(:(Open .> Close), googdata)
googdata |> where(:(Open .> Close))
googdata |> where(:(Open .> Close))
googdata |> where(:(Open .> Close))
googdata |> where(:(Open .> Close), :(Month == "01"))
Month == "01"
googdata |> where(:(Open .> Close), :(Month .== "01"))
googdata |> where(:(Open .> Close & Month .== "01"))
googdata |> where(:((Open .> Close) & (Month .== "01")))
expr = :(Open .> Close & Month .== "01")
expr.head
expr.args
expr.args[3]
expr.args[3].head
parse_df_expr(expr)
parse_df_expr(expr, googdata)
typeof(expr.args[3])
expr = :(log(Open) - log(Close) .> 0.0)
googdata |> where(expr)
googdata |> where(expr)
parse_df_expr(expr, googdata)
googdata |> where(expr)
googdata |> where(:(Open .> Close & Month .== "01"))
googdata |> where(:(Open .> Close .& Month .== "01"))
googdata |> where(:(Open .> Close && Month .== "01"))
googdata |> where(:(Open .> Close & Month .== "01"))
googdata |> where(:((Open .> Close) & (Month .== "01")))
gg |> where(expr)
gg |> where(expr)
gg |> where(expr)
try x = 1 catch x = 2 end
x
gg |> where(expr)
gg |> where(expr)
expr
gg |> where(:((Open .> Close) & (Month .== "01")))
typeof(googdate[:Date])
typeof(googdata[:Date])
googdata
map(year, data[:Date])
data |> update(:(Year = map(year, Date))
)
data |> update(:(Month = map(month, Date))
)
nothing
data
expr = :(Volume .>= quantile(Volume, .75))
where(expr, data)
gg = data |> groupby(:Year, :Month)
gg = data |> groupby(:Year, :Month)
gg |> where(expr)
using DataFrames
Queries.update
quit
date
groupby
import DataFrames.groupby
GroupApplied <: GroupedDataFrame
typeof(data)
 names(GroupApplied)
data.keys
vcat(data.keys)
typeof(data)
aggregte(:(Avg = mean(Spread)), data)
aggregate(:(Avg = mean(Spread)), data)
data.keys
vcat(data.keys)
aggregate(:(Avg = mean(Spread)), data)
expr = :(AV = mean(Volume))
map(aggregate(expr), data)
length(map(aggregate(expr), data))
vcat(map(aggregate(expr), data)...)
vcat(map(aggregate(expr), data))
map(aggregate(expr), data)
mm = map(aggregate(expr), data)
length(mm)
for (i, d) in enumerate mm
print i
for (i, d) in enumerate mm
print(i)
end
 mm.keys
length(mm.keys)
 mm[1]
 mm
mm.vals
vcat(mm.vals)
vcat(mm.vals...)
vcat(vcat(mm.vals...))
mm.vals
[mm.vals]
length(mm.vals)
vcat(length(mm.vals))
mm.vals[1]
mm.vals[1][1]
mm.vals[1:10]
[mm.vals[1:10]]
mm.vals[1]
mm.vals[1][1]
mm.vals...
vcat(mm.vals...)
vcat(vcat(mm.vals...))
vcat(vcat(mm.vals...)...)
end
vcat(map(aggregate(expr), data))
typeof(data)
@which aggregate(expr, data)
aggdfs = map(aggregate(expr), data)
aggdfs.keys
vcat(aggdfs.keys)
kk=vcat(aggdfs.keys)
aggregate(expr, data)
minumum(googdata[:Volume])
minimum(googdata[:Volume])
minimum(data[:Volume])
expr = [:(AvgVolume = mean(Volume)),
              :(AvgSpread = mean(Spread))]
@which aggregate(expr, data)
aggregate(expr, data)
aggregate(expr, fulldata)
aggregate(expr, fulldata)
aggregate(expr, fulldata)
fulldata[1]
fulldata[2]
map(aggregate(expr), fulldata)
vcat(map(aggregate(expr), fulldata).vals...)
vcat(map(aggregate(expr), fulldata).vals...)
fulldata.parent.keys[fulldata.start, fulldata.cols]
fulldata.parent[fulldata.start, fulldata.cols]
fulldata
names(GroupedData)
names(GroupedDataFrame)
fulldata.parent[fulldata.starts, fulldata.cols]
hcat(fulldata.parent[fulldata.starts, fulldata.cols], vcat(map(aggregate(expr), fulldata).vals...))
mm = map(aggregat(expr), fulldata)
mm = map(aggregate(expr), fulldata)
typeof(mm)
typeof(fulldata)
fulldata |> aggregate(expr)
@which aggregate(expr)(fulldata)
aggregate(expr, fulldata)
@which aggregate(expr, fulldata)
@which aggregate(expr, fulldata)
aggregate(expr, fulldata)
aggregate(expr, fulldata)
aggregate(expr, data)
aggregate(expr, fulldata)
@which aggregate(expr, data)
aggregate(expr, fulldata)
aggregate(expr, fulldata)
aggregate(expr, data)
expr
map(a -> aggregate(a, data), expr)
merge(map(a -> aggregate(a, data), expr)...)
join(map(a -> aggregate(a, data), expr)...)
join(map(a -> aggregate(a, data), expr)..., on=[:Year, :Month])
typeof(date)
typeof(data)
typeof(data[1])
names(GroupApplied)
typeof(data.keys[1])
typeof(data.vals[1])
map(aggregate(expr), data.vals)
vcat(map(aggregate(expr), data.vals))
vcat(map(aggregate(expr), data.vals)...)
data |> aggregate(expr)
data |> aggregate(:(mean = mean(Volume)))
(data |> aggregate(:(mean = mean(Volume)))).keys
(data |> aggregate(:(mean = mean(Volume)))).vals
data |> aggregate(:(mean = mean(Volume)))
data |> aggregate(expr)
vcat(data |> aggregate(expr))
vcat((data |> aggregate(expr))...)
vcat((data |> aggregate(expr))...)
data |> aggregate(expr)
data |> aggregate(expr)
data |> aggregate(:(mean = mean(Volume)))
typeof(data |> aggregate(:(mean = mean(Volume))))
aggregate(expr, data)
expr |> aggregate(expr)
data |> aggregate(expr)
expr1 = :(mean = mean(Volume))
aggregate(expr1, data)
vcat(aggregate(expr1, data)...)
map(aggregate(expr1), data)
map(aggregate(expr1), data.vals)
vcat(map(aggregate(expr1), data.vals)...)
vcat(vcat(map(aggregate(expr1), data.vals)...)...)
aggregate(expr1, data)
sort(data, [:Year, :Month])
methods(DataFrame.sort)
sortperm(data[:Year])
sortperm(data[[:Year, :Month]])
sortperm(data[:AvgSpread])
sortperm(-data[:AvgSpread])
sortperm(-data[:Year, :AvgSpread])
sortperm(-data[[:Year, :AvgSpread]])
